#Workflow based on https://github.com/abarichello/godot-ci
name: "godot-ci export"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GODOT_VERSION: 3.4.2
  EXPORT_NAME: Godot-Test

jobs:
  # export-windows:
  #   name: Windows Export
  #   runs-on: ubuntu-latest
  #   container:
  #     image: barichello/godot-ci:3.4.2
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - name: Setup
  #       run: |
  #         mkdir -v -p ~/.local/share/godot/templates
  #         mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
  #     - name: Windows Build
  #       run: |
  #         mkdir -v -p build/windows
  #         godot -v --export "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build_windows
  #         path: build/windows

  # export-mac:
  #   name: Max Export
  #   runs-on: ubuntu-latest
  #   container:
  #     image: barichello/godot-ci:3.4.2
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - name: Setup
  #       run: |
  #         mkdir -v -p ~/.local/share/godot/templates
  #         mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
  #     - name: Mac Build
  #       run: |
  #         mkdir -v -p build/mac
  #         godot -v --export "Mac OSX" ./build/mac/$EXPORT_NAME.zip
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build_mac
  #         path: build/mac

  # export-linux:
  #   name: Linux Export
  #   runs-on: ubuntu-latest
  #   container:
  #     image: barichello/godot-ci:3.4.2
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - name: Setup
  #       run: |
  #         mkdir -v -p ~/.local/share/godot/templates
  #         mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
  #     - name: Linux Build
  #       run: |
  #         mkdir -v -p build/linux
  #         godot -v --export "Linux/X11" ./build/linux/$EXPORT_NAME.x86_64
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: build_linux
  #         path: build/linux

  export-web:
   # Only run on Pull Requests within the same repository, and not from forks.
    if: github.event.pull_request.head.repo.full_name == github.repository
    name: Web Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.4.2
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Compress Images
        uses: calibreapp/image-actions@main
        with:
          # The `GITHUB_TOKEN` is automatically generated by GitHub and scoped only to the repository that is currently running the action. By default, the action canâ€™t update Pull Requests initiated from forked repositories.
          # See https://docs.github.com/en/actions/reference/authentication-in-a-workflow and https://help.github.com/en/articles/virtual-environments-for-github-actions#token-permissions
          jpegQuality: '10'
          jpegProgressive: false
          pngQuality: '10'
          webpQuality: '10'
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Web Build
        run: |
          mkdir -v -p build/web
          godot -v --export "HTML5" ./build/web/index.html
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build_web
          path: build/web
      - name: Install rsync ðŸ“š
        run: |
          apt-get update && apt-get install -y rsync
      - name: Deploy to GitHub Pages ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.2.5
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/web # The folder the action should deploy.
